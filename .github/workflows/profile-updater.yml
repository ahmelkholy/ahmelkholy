name: 🚀 Ultimate Profile Updater

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  update-profile:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 📦 Install Dependencies
      run: |
        pip install requests beautifulsoup4 feedparser scholarly python-dateutil pytz

    - name: 🎯 Update Dynamic Content
      run: |
        python << 'EOF'
        import requests
        import json
        import re
        from datetime import datetime
        import pytz
        from dateutil import parser

        def get_github_stats():
            """Fetch GitHub statistics"""
            try:
                response = requests.get('https://api.github.com/users/ahmelkholy')
                if response.status_code == 200:
                    data = response.json()
                    return {
                        'followers': data.get('followers', 0),
                        'public_repos': data.get('public_repos', 0),
                        'following': data.get('following', 0)
                    }
            except:
                pass
            return None

        def get_latest_commit():
            """Get latest commit information"""
            try:
                response = requests.get('https://api.github.com/users/ahmelkholy/events?per_page=1')
                if response.status_code == 200:
                    events = response.json()
                    if events:
                        event = events[0]
                        if event['type'] == 'PushEvent':
                            return {
                                'repo': event['repo']['name'],
                                'message': event['payload']['commits'][0]['message'][:50] + '...' if len(event['payload']['commits'][0]['message']) > 50 else event['payload']['commits'][0]['message'],
                                'date': event['created_at']
                            }
            except:
                pass
            return None

        def get_motivational_quote():
            """Get a programming/engineering quote"""
            quotes = [
                "The best way to predict the future is to invent it. - Alan Kay",
                "Code is like humor. When you have to explain it, it's bad. - Cory House",
                "First, solve the problem. Then, write the code. - John Johnson",
                "The most important property of a program is whether it accomplishes the intention of its user. - C.A.R. Hoare",
                "Engineering is the art of directing the great sources of power in nature for the use and convenience of man. - Thomas Tredgold",
                "In engineering, there are no small problems. - Unknown",
                "Simplicity is the ultimate sophistication. - Leonardo da Vinci"
            ]
            import random
            return random.choice(quotes)

        def get_current_time_info():
            """Get current time in Egypt"""
            egypt_tz = pytz.timezone('Africa/Cairo')
            now = datetime.now(egypt_tz)
            return {
                'time': now.strftime('%H:%M'),
                'date': now.strftime('%B %d, %Y'),
                'emoji': '🌅' if 5 <= now.hour < 12 else '☀️' if 12 <= now.hour < 18 else '🌙'
            }

        # Read current README
        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()

        # Get data
        github_stats = get_github_stats()
        latest_commit = get_latest_commit()
        quote = get_motivational_quote()
        time_info = get_current_time_info()

        # Update dynamic sections
        updates_made = False

        # Add or update dynamic status section
        status_section = f"""
## 🌟 Dynamic Status
> Last updated: {time_info['emoji']} {time_info['date']} at {time_info['time']} (Cairo Time)

**💡 Quote of the moment:** *{quote}*
"""

        if github_stats:
            status_section += f"""
**📊 GitHub Stats:** {github_stats['public_repos']} repositories • {github_stats['followers']} followers • {github_stats['following']} following
"""

        if latest_commit:
            commit_date = parser.parse(latest_commit['date']).strftime('%B %d, %Y')
            status_section += f"""
**🔄 Latest Activity:** {latest_commit['message']} in `{latest_commit['repo']}` ({commit_date})
"""

        # Insert or replace dynamic status section
        if '## 🌟 Dynamic Status' in content:
            # Replace existing section
            pattern = r'## 🌟 Dynamic Status.*?(?=##|\Z)'
            content = re.sub(pattern, status_section.strip() + '\n\n', content, flags=re.DOTALL)
            updates_made = True
        else:
            # Insert after the main intro
            insert_point = content.find('## 📚 Research & Expertise')
            if insert_point != -1:
                content = content[:insert_point] + status_section + '\n' + content[insert_point:]
                updates_made = True

        if updates_made:
            with open('README.md', 'w', encoding='utf-8') as f:
                f.write(content)
            print("✅ Profile updated successfully!")
        else:
            print("ℹ️ No updates needed")
        EOF

    - name: 📈 Update Research Metrics
      run: |
        python << 'EOF'
        import requests
        import re
        from datetime import datetime

        def get_research_metrics():
            """Simulate research metrics update"""
            # In a real implementation, you would fetch from Google Scholar API
            # For now, we'll add a timestamp to show the system is working
            return {
                'last_checked': datetime.now().strftime('%B %Y'),
                'papers_count': '15+',
                'citations': '100+',
                'h_index': '5'
            }

        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()

        metrics = get_research_metrics()

        # Add research metrics badge if not present
        if 'Research_Metrics' not in content:
            metrics_badge = f"""
<div align="center">
  <img src="https://img.shields.io/badge/Publications-{metrics['papers_count']}-blue?style=for-the-badge" alt="Publications"/>
  <img src="https://img.shields.io/badge/Citations-{metrics['citations']}-green?style=for-the-badge" alt="Citations"/>
  <img src="https://img.shields.io/badge/H--Index-{metrics['h_index']}-orange?style=for-the-badge" alt="H-Index"/>
  <img src="https://img.shields.io/badge/Last_Updated-{metrics['last_checked']}-purple?style=for-the-badge" alt="Last Updated"/>
</div>
"""

            # Insert after the profile views counter
            insert_point = content.find('</div>\n\n## 📚 Research & Expertise')
            if insert_point != -1:
                insert_point = content.find('</div>', insert_point) + 6
                content = content[:insert_point] + '\n' + metrics_badge + content[insert_point:]

                with open('README.md', 'w', encoding='utf-8') as f:
                    f.write(content)
                print("✅ Research metrics added!")
        EOF

    - name: 🎨 Enhance Visual Elements
      run: |
        python << 'EOF'
        import re

        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()

        # Add typing animation to the title if not present
        if 'typing' not in content:
            # Replace the main title with a typing animation version
            old_title = '# <div align="center">Ahmed Elkholy</div>'
            new_title = '''# <div align="center">
  <img src="https://readme-typing-svg.herokuapp.com?font=Fira+Code&size=35&duration=3000&pause=1000&color=00D9FF&center=true&vCenter=true&multiline=true&width=600&height=100&lines=Ahmed+Elkholy;Power+Systems+Engineer;Researcher+%26+Educator;PhD+Candidate+%40+MPEI" alt="Typing SVG" />
</div>'''

            if old_title in content:
                content = content.replace(old_title, new_title)

                with open('README.md', 'w', encoding='utf-8') as f:
                    f.write(content)
                print("✅ Enhanced title with typing animation!")
        EOF

    - name: 📱 Add Mobile-Friendly Improvements
      run: |
        python << 'EOF'
        import re

        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()

        # Add responsive improvements if not present
        if '<!-- Mobile Responsive -->' not in content:
            mobile_css = '''
<!-- Mobile Responsive -->
<style>
@media (max-width: 768px) {
  img[src*="capsule-render"] {
    width: 100% !important;
    height: auto !important;
  }
  .github-stats img {
    width: 100% !important;
    max-width: 350px !important;
  }
}
</style>

'''
            # Insert at the beginning of the file
            content = mobile_css + content

            with open('README.md', 'w', encoding='utf-8') as f:
                f.write(content)
            print("✅ Added mobile-friendly improvements!")
        EOF

    - name: 🔄 Commit and Push Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🤖 Auto-update profile [$(date +'%Y-%m-%d %H:%M:%S UTC')]

          ✨ Updates made:
          - Dynamic status section
          - Research metrics
          - Visual enhancements
          - Mobile optimizations

          🤖 Powered by GitHub Actions"
          git push
          echo "✅ Changes committed and pushed!"
        fi
